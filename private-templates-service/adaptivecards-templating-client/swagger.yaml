swagger: "2.0"
info:
  description: "Adaptive Cards Templating Service API definition."
  version: "1.0.0"
  title: "adaptivecards-templating-service-javascript-sdk"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "adaptivecms.azurewebsites.net"
tags:
- name: "template"
  description: "Adaptive Cards Template"
  externalDocs:
    description: "Adaptive Cards Templating Service"
    url: "https://github.com/microsoft/adaptivecards-templates/tree/dev/private-templates-service"
- name: "user"
  description: "Adaptive Cards Templating Service users"
schemes:
- "https"
- "http"
securityDefinitions:
  bearer_auth:
    type: apiKey
    name: Authorization
    in: header
paths:
  '/template':
    get: 
      tags: 
        - "template"
      summary: "Find all templates"
      operationId: "allTemplates"
      description: "Returns the latest version of all public templates and owned templates"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema: 
            $ref: "#/definitions/TemplateList"
        400: 
          description: "No templates"
          schema: 
            $ref: "#/definitions/BaseError"
        401: 
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"
      parameters:
        - in: query
          name: isPublished
          type: boolean
          description: Query based on if template is published
        - in: query
          name: name
          type: string
          description: Name of template to query for
        - in: query
          name: version
          type: string
          description: Version of template
        - in: query
          name: owned
          type: boolean
          description: Display only the templates owned by the user
        - in: query
          name: sortBy
          enum:
            - "alphabetical"
            - "dateCreated"
            - "dateUpdated"
          type: string
          description: Sort returned templates by parameter
        - in: query
          name: sortOrder
          enum:
            - "ascending"
            - "descending"
          type: string
        - in: query
          name: tags
          description: List of tags to filter templates by
          type: string
      security:
        - bearer_auth: []
    post: 
      tags: 
        - "template"
      summary: "Add a new template"
      operationId: "createTemplate"
      parameters:
        - in: "body"
          name: "body"
          description: "Template object to be added"
          required: true
          schema:
            $ref: "#/definitions/PostedTemplate"
      responses:
        201: 
          description: "Template successfully created"
          schema:
            $ref: "#/definitions/ResourceCreated"
        400:
          description: "Invalid template"
          schema: 
            $ref: "#/definitions/BaseError"
        401:
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"
      security:
        - bearer_auth: []
  '/template/{templateId}':
    get: 
      tags: 
        - "template"
      summary: "Find template by id"
      description: "Returns a single template"
      operationId: "templateById"
      produces:
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "ID of template to return"
          required: true
          type: string
        - name: isPublished
          in: query
          type: boolean
          description: Query based on if template is published
        - name: version
          in: query
          type: string
          description: Version of template to return
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TemplateList'
        400:
          description: "Invalid template ID supplied"
          schema: 
            $ref: "#/definitions/BaseError"
        404:
          description: "Template not found"
          schema: 
            $ref: "#/definitions/BaseError"
        401:
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"
      security:
        - bearer_auth: []
    post:
      tags: 
        - "template"
      summary: "Update existing template"
      description: "Update existing template given id"
      produces:
        - "application/json"
      operationId: "postTemplateById"
      parameters:
        - name: "templateId"
          in: "path"
          description: "ID of template to update"
          required: true
          type: string
        - in: "body"
          name: "body"
          description: "Template object to be added"
          required: true
          schema:
            $ref: "#/definitions/PostedTemplate"
      responses:
        201: 
          description: "successful operation"
        400:
          description: "Unable to create given template"
          schema: 
            $ref: "#/definitions/BaseError"
        401:
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"        
      security:
        - bearer_auth: []
    delete:
      tags: 
        - "template"
      summary: "Delete version of template, default latest"
      operationId: "deleteTemplateById"
      parameters:
        - name: "templateId"
          in: "path"
          description: "ID of template to return"
          required: true
          type: string
        - name: version
          in: query
          description: "Version of template to delete"
          type: string
      responses:
        204:
          description: "successful delete"
        401:
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"   
  '/template/{templateId}/preview':
    get: 
      tags: 
        - "template"
      summary: "Get template preview"
      operationId: "templatePreview"
      produces: 
        - "application/json"
      parameters:
        - name: "templateId"
          in: "path"
          description: "ID of template to return"
          required: true
          type: string
        - name: version
          in: query
          description: "Version of template to preview"
          required: true
          type: string
      responses: 
        200: 
          description: "successful operation"
          schema: 
            $ref: "#/definitions/TemplatePreview"
  '/template/recent':
    get: 
      tags: 
        - "template"
      summary: "Get recently viewed, edited templates, and recent tags."
      operationId: "getRecent"
      produces: 
        - "application/json"
      responses: 
        200: 
          description: "successful operation"
          schema: 
            $ref: "#/definitions/Recent"
      security:
        - bearer_auth: []
  '/user':
    get: 
      tags:
        - "user"
      summary: "Get user's info"
      description: "Returns user's info"
      produces:
        - "application/json"
      responses:
        200: 
          description: "successful operation"
          schema: 
            $ref: "#/definitions/UserList"
        401: 
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError" 
      security:
        - bearer_auth: []
    post:
      tags:
        - "user"
      summary: "Update user's info"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User info to be added"
          required: true
          schema:
            $ref: "#/definitions/PostedUser"
      responses: 
        200: 
          description: "successful operation"
        401: 
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError"   
      security:
        - bearer_auth: []    
    delete: 
      tags: 
        - "user"
      summary: "Delete all user info"
      description: "Delete all user info and user owner templates"
      produces: 
        - "application/json"
      responses:
        204: 
          description: "successful operation"
        401: 
          description: "Unauthorized user"
          schema: 
            $ref: "#/definitions/BaseError" 
      security:
        - bearer_auth: []
definitions:
  ResourceCreated:
    type: object
    properties:
      id:
        type: string
  BaseError: 
    type: object
    properties: 
      error: 
        type: object
        properties: 
          code:
            type: string
          message:
            type: string
  TemplateList:
    type: object
    properties: 
      templates:
        type: array
        items: 
          $ref: "#/definitions/Template"
  Template:
    type: object
    properties:
      _id: 
        type: string
      name: 
        type: string
      instances:
        type: array
        items: 
          $ref: "#/definitions/TemplateInstance"
      owner: 
        type: string
      isLive:
        type: boolean
      createdAt:
        type: string
        format: Date
      updatedAt: 
        type: string
        format: Date
      tags: 
        type: array
        items:
          type: string
      deletedVersions: 
        type: array
        items: 
          type: string
  TemplateInstance:
    type: object
    properties:
      _id: 
        type: string
      json: 
        type: string
        format: JSON
      version: 
        type: string
      publishedAt: 
        type: string
        format: Date
      state: 
        enum:
          - "draft"
          - "live"
          - "deprecated"
        type: string
      isShareable:
        type: boolean
      numHits: 
        type: number
      data: 
        type: array
        items: 
          type: string
      updatedAt:
        type: string
        format: Date
      createdAt:
        type: string
        format: Date
  PostedTemplate:
    type: object
    properties: 
      name: 
        type: string
      version:
        type: string
      template: 
        type: object
        format: JSON
      state: 
        enum:
          - "draft"
          - "live"
          - "deprecated"
        type: string
      isShareable: 
        type: boolean
      isPublished:
        type: boolean
      tags: 
        type: array
        items: 
          type: string
      data: 
        type: array
        items: 
          type: object
          format: JSON
  UserList:
    type: object
    properties:
      user:
        type: array
        items:
          $ref: "#/definitions/User"
  PostedUser:
    type: object
    properties:
      firstName: 
        type: string
      lastName: 
        type: string
      team: 
        type: array
        items: 
          type: string
      org: 
        type: array
        items: 
          type: string     
  User: 
    type: object  
    properties:
      _id: 
        type: string
      authId: 
        type: string
      authIssuer:
        type: string
      firstName: 
        type: string
      lastName: 
        type: string
      team: 
        type: array
        items: 
          type: string
      org: 
        type: array
        items: 
          type: string
      recentlyViewed: 
        type: array
        items: 
          type: string
      recentlyEdited: 
        type: array
        items: 
          type: string   
      recentTags: 
        type: array
        items: 
          type: string
  TagList: 
    type: object
    properties: 
      tags:
        type: array
        items: 
          type: string
  Recent: 
    type: object
    properties: 
      recentlyViewed:
        $ref: "#/definitions/TemplateList"
      recentlyEdited: 
        $ref: "#/definitions/TemplateList"
      recentlyUsed:
        $ref: "#/definitions/TagList"
  TemplatePreviewInstance:
    type: object
    properties:
      version:
        type: string
      json:
        type: string
        format: JSON
      state: 
        type: string
      data: 
        type: array
        items:  
          type: string
          format: JSON
  TemplatePreviewUser: 
    type: object
    properties:
      firstName: 
        type: string
      lastName: 
        type: string
      team: 
        type: array
        items: 
          type: string
      org: 
        type: array
        items: 
          type: string
  TemplateInfo: 
    type: object
    properties:
      _id: 
        type: string
      name: 
        type: string
      instance: 
        $ref: "#/definitions/TemplatePreviewInstance"
      tags: 
        type: array
        items:
          type: string
      owner: 
        $ref: "#/definitions/TemplatePreviewUser"
  TemplatePreview: 
    type: object
    properties:
      template:
        $ref: "#/definitions/TemplateInfo"
        
